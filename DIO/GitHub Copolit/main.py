import re
import json
import logging

# Configura√ß√£o do logger
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)


def identificar_bandeira(numero_cartao: str) -> str:
    """
    Identifica a bandeira de um cart√£o de cr√©dito a partir do n√∫mero informado.

    Par√¢metros:
        numero_cartao (str): N√∫mero do cart√£o (com ou sem formata√ß√£o).

    Retorna:
        str: JSON com a bandeira identificada ou uma mensagem de erro.
    """
    numero = re.sub(r"\D", "", numero_cartao)
    logging.debug(f"N√∫mero sanitizado: {numero}")

    if not numero.isdigit() or not 13 <= len(numero) <= 19:
        logging.warning("N√∫mero inv√°lido ou fora do padr√£o")
        return json.dumps(
            {"erro": "N√∫mero inv√°lido ou fora do padr√£o"},
            ensure_ascii=False
        )

    padroes = {
        "Visa": r"^4\d{12}(\d{3})?$",
        "MasterCard": r"^(5[1-5]\d{14}|2(2[2-9][1-9]|2[3-9]\d|[3-6]\d{2}|7[01]\d|720)\d{12})$",
        "American Express": r"^3[47]\d{13}$",
        "Diners Club": r"^3(0[0-5]|[68]\d)\d{11}$",
        "Discover": r"^6(011|5\d{2}|4[4-9]\d)\d{12}$",
        "enRoute": r"^2(014|149)\d{11}$",
        "JCB": r"^(2131|1800|35\d{3})\d{11}$",
        "Voyager": r"^8699\d{11}$",
        "Hipercard": r"^6062\d{12,}$",
        "Aura": r"^50\d{14,}$"
    }

    for bandeira, padrao in padroes.items():
        if re.match(padrao, numero):
            logging.info(f"Bandeira identificada: {bandeira}")
            return json.dumps({"bandeira": bandeira}, ensure_ascii=False)

    logging.info("Bandeira n√£o identificada")
    return json.dumps({"bandeira": "Desconhecida"}, ensure_ascii=False)


def solicitar_cartoes():
    """
    Solicita ao usu√°rio a entrada de n√∫meros de cart√£o para identificar as bandeiras.
    Permite m√∫ltiplos cart√µes separados por v√≠rgula e oferece a op√ß√£o de repetir a consulta.
    """
    while True:
        entrada = input(
            "\nDigite o(s) n√∫mero(s) do cart√£o (separados por v√≠rgula):\n"
            "Exemplo: 4111 1111 1111 1111, 5500-0000-0000-0004\n> "
        )

        cartoes = [c.strip() for c in entrada.split(",") if c.strip()]
        if not cartoes:
            logging.warning("Nenhum cart√£o fornecido.")
            print("‚ö†Ô∏è Nenhum cart√£o detectado. Tente novamente.")
            continue

        for cartao in cartoes:
            logging.info(f"Processando cart√£o: {cartao}")
            resultado = identificar_bandeira(cartao)
            print(f"\nCart√£o: {cartao} ‚Üí Resultado: {resultado}")

        continuar = input("\nDeseja consultar novo cart√£o? (sim/n√£o): ").strip().lower()
        if continuar not in ("sim", "s"):
            logging.info("Encerrando aplica√ß√£o.")
            print("‚úÖ Encerrando consulta. Obrigado!")
            break


if __name__ == "__main__":
    logging.info("Iniciando aplica√ß√£o de consulta de bandeiras.")
    print("üí≥ CONSULTA DE BANDEIRA DE CART√ÉO DE CR√âDITO")
    solicitar_cartoes()
